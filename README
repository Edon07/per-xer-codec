How to build (All directories are relative to repository root):

Prerequisites:

git
make
automake
autoconf
libtoolize
java 1.8
maven
eclipse CDT
asn1c (Should be already downloaded if you used git clone --recurse-submodules)

1) run 'make directories' inside of the asn1-codegen directory
    This will create the various empty directories that git won't track

2) Add the necessary ASN 1 files to the directory asn1-codegen/src/asn1/ 

3) run 'make' inside of the asn1-codegen directory, and follow up with 'make install'
    This will:
        a) Build the asn1c compiler
        b) Install it into asn1-codegen/install/src
        c) Generate the c code using the ASN.1 files provided
        d) Move them to the jni/asn1 directory

4a) In eclipse, select the correct build configuration under Project->Properties->C/C++ Build->Manage Configurations->Set Active
4b) Build the generated c code using the eclipse-generated makefile by using Project->Build Project
    This will:
        Generate the file per-xer-codec/libperxercodec.{dylib|so}, depending on the configuration selected in eclipse
    
5) Run the maven "package" goal
    This will:
        Copy the dynamic libraries generated in step 4 to the correct places
        Build the classes and dynamic libraries into the file target/per-xer-codec-*.jar
        
The jar is now ready to use

How to Deploy:

Place the jar file generated by the build process on the classpath

(Optional) Place the dynamic libraries generated by the build process on the library load path
    If you choose to do this, you will need to ensure that the JVM variable java.library.path contains the directory these were placed in
    If you choose not to do this, you will need to ensure that the JVM can load shared libraries from the JVM's temporary file directory
    
Finally, link your application against the jar, build, and execute it


Intended Usage:

The primary way to use this module is to include the PerXerCodec class, and use its perToXer and xerToPer methods.
These methods require 3 things: A PerData format, a XerData Format, and an Asn1Type.
Asn1Types can be accessed as static members of PerXerCodec (e.g. ServiceRequestType).
The PerData can be any object that implements the PerData interface, Likewise for XerData.
